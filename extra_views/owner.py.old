# -*- coding: utf-8 -*-
from django.views.generic.base import TemplateResponseMixin, View
from django.http import HttpResponseRedirect, HttpResponseForbidden
from django.forms.formsets import formset_factory
from django.forms.models import modelformset_factory, inlineformset_factory
from django.views.generic.detail import SingleObjectMixin, SingleObjectTemplateResponseMixin
from django.views.generic.list import MultipleObjectMixin, MultipleObjectTemplateResponseMixin
from django.forms.models import BaseInlineFormSet
from django.core.exceptions import ImproperlyConfigured, ObjectDoesNotExist
from django.http import Http404
from django.utils.translation import ugettext as _
from django.views.generic.edit import ModelFormMixin, ProcessFormView
import logging

logger = logging.getLogger(__name__)

class OwnerMixin(SingleObjectTemplateResponseMixin):
    owner_field_name = 'owner'
    owner_lookup = 'owner'

    def get_owner_field_name(self):
        """
        Returns the name of the field that contains the user who owns the object.
        """
        return self.owner_field_name

    def check_owner(self):
        object_owner = getattr(self.parent_object, self.owner_field_name, None)
        if not object_owner:
            raise ValueError('The owner field cannot be empty')
        if object_owner == self.request.user:
            return True
        return False

class OwnerModelFormMixin(ModelFormMixin, OwnerMixin):
    owner_field = None
    parent_pk_url_kwarg = 'parent_pk'
    parent_queryset = None

    def get_parent_object(self, queryset=None):

        if queryset is None:
            queryset = self.get_parent_queryset()
        pk = self.kwargs.get(self.parent_pk_url_kwarg, None)
        if pk is not None:
            queryset = queryset.filter(pk=pk)
        else:
            raise AttributeError(u"Generic detail view %s must be called with "
                                 u"either an object pk or a slug."
                                 % self.__class__.__name__)

        try:
            obj = queryset.get()
        except ObjectDoesNotExist:
            raise Http404(_(u"No %(verbose_name)s found matching the query") %
                          {'verbose_name': queryset.model._meta.verbose_name})
        return obj

    def get_parent_queryset(self):
        if self.parent_queryset is None:
            if self.parent_model:
                return self.parent_model._default_manager.all()
            else:
                raise ImproperlyConfigured(u"%(cls)s is missing a queryset. Define "
                                           u"%(cls)s.model, %(cls)s.queryset, or override "
                                           u"%(cls)s.get_object()." % {
                                                'cls': self.__class__.__name__
                                        })
        return self.parent_queryset._clone()

    def form_valid(self, form):
        self.object = form.save(commit=False)
        if self.owner_field:
            setattr(self.object, self.owner_field, self.parent_object)
        self.object.save()
        return super(OwnerModelFormMixin, self).form_valid(form)


class BaseOwnerView(OwnerModelFormMixin, View):
    """
    A base view for displaying a modelformset for a queryset belonging to a parent model.
    Checks the owner of the object before procesing anything.
    """

    def not_owner_actions(self):
        """
        Actions to be taken when the user attempts to access another user object.
        Must return a HttpResponse Object.
        """
        logger.warning(u'SECURITY WARNING: The user %s has attempted to access the CV with ID: %s' % (self.request.user.username, self.parent_object.id))
        return HttpResponseForbidden(u'You are not allowed to see other users CVs. This action will be reported.')

    def get(self, request, *args, **kwargs):
        self.parent_object = self.get_parent_object()
        is_the_owner = self.check_owner()
        if not is_the_owner:
            return self.not_owner_actions()
        return super(BaseOwnerView, self).get(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        self.parent_object = self.get_parent_object()
        is_the_owner = self.check_owner()
        if not is_the_owner:
            return self.not_owner_actions()
        return super(BaseOwnerView, self).post(request, *args, **kwargs)    



class BaseOwnerCreateView(BaseOwnerView, OwnerModelFormMixin, ProcessFormView):
    def get(self, request, *args, **kwargs):
        self.object = None
        self.parent_object = self.get_parent_object()
        return super(BaseOwnerCreateView, self).get(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        self.object = None
        self.parent_object = self.get_parent_object()
        return super(BaseOwnerCreateView, self).post(request, *args, **kwargs)

class CreateOwnerView(BaseOwnerCreateView):
    template_name_suffix = '_form'


class BaseOwnerUpdateView(BaseOwnerView, OwnerModelFormMixin, ProcessFormView):
    def get(self, request, *args, **kwargs):
        self.object = self.get_object()
        self.parent_object = self.get_parent_object()
        return super(BaseOwnerUpdateView, self).get(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        self.object = self.get_object()
        self.parent_object = self.get_parent_object()
        return super(BaseOwnerUpdateView, self).post(request, *args, **kwargs)

class UpdateOwnerView(BaseOwnerUpdateView):
    template_name_suffix = '_form'
